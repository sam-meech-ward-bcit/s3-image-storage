{"version":3,"sources":["components/PageHeader/index.js","components/Post/index.js","components/NewPost/index.js","pages/Home/index.js","userManager.js","network/index.js","Theme.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","grow","flexGrow","menuButton","marginRight","spacing","title","display","textAlign","breakpoints","up","PageHeader","props","classes","React","useState","className","AppBar","position","Toolbar","IconButton","aria-label","onClick","newPost","color","Typography","variant","noWrap","appName","root","width","media","height","paddingTop","expand","transform","marginLeft","transition","transitions","create","duration","shortest","expandOpen","avatar","backgroundColor","red","textField","description","marginBottom","mainCardContent","Post","post","Card","CardMedia","image","input","NewPost","images","setImages","allowCrop","onSubmit","event","preventDefault","Button","type","posts","flexDirection","alignItems","margin","Home","setPosts","setAppName","creatingNewPost","setCreatingNewPost","reloadPosts","a","getPosts","data","console","log","nameData","name","alert","JSON","stringify","useEffect","createPost","key","imagesArray","push","savePost","result","postComponents","map","getToken","localStorage","getItem","token","Authorization","http","method","path","params","headers","axios","dataURLtoFile","dataurl","filename","arr","split","mime","match","bstr","atob","n","length","u8arr","Uint8Array","charCodeAt","File","uuid","formData","FormData","forEach","append","then","res","Theme","pallet","t","createMuiTheme","light","ThemeProvider","CssBaseline","children","App","error","prefersDarkMode","useMediaQuery","network","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.7fc6256c.chunk.js","sourcesContent":["import React from 'react';\nimport { fade, makeStyles } from '@material-ui/core/styles';\nimport { AppBar, Avatar, Toolbar, IconButton, Typography, InputBase, Badge, MenuItem, Menu } from '@material-ui/core'\nimport AddIcon from '@material-ui/icons/AddCircle';\n\nconst useStyles = makeStyles((theme) => ({\n  grow: { \n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    display: 'none',\n    textAlign: 'center',\n    [theme.breakpoints.up('sm')]: {\n      display: 'block',\n    },\n  },\n  \n}));\n\nexport default function PageHeader(props) {\n  const classes = useStyles()\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  \n  return (\n    <div className={classes.grow}>\n      <AppBar position=\"static\">\n        <Toolbar>\n        <IconButton\n              aria-label=\"add a new post\"\n              onClick={props.newPost}\n              color=\"inherit\"\n            >\n              <AddIcon />\n            </IconButton>\n          <Typography className={classes.title} variant=\"h6\" noWrap>\n            {props.appName}\n          </Typography>\n          \n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}","import React, { useState } from 'react'\n\nimport { Box, TextField, Button, Slide, Card, CardHeader, CardMedia, CardContent, CardActions, Collapse, Avatar, IconButton, Typography } from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles'\nimport * as icons from '@material-ui/icons'\n\nimport clsx from 'clsx'\n\nimport { red } from '@material-ui/core/colors'\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: 600,\n  },\n  media: {\n    height: 0,\n    paddingTop: '56.25%', // 16:9\n  },\n  expand: {\n    transform: 'rotate(0deg)',\n    marginLeft: 'auto',\n    transition: theme.transitions.create('transform', {\n      duration: theme.transitions.duration.shortest,\n    }),\n  },\n  expandOpen: {\n    transform: 'rotate(180deg)',\n  },\n  avatar: {\n    backgroundColor: red[500],\n  },\n  textField: {\n    flexGrow: 1\n  },\n  description: {\n    marginBottom: 10\n  },\n  mainCardContent: {\n    paddingTop: 0\n  }\n}))\n\nexport default function Post(props) {\n  const classes = useStyles(props)\n\n  const { post } = props\n\n  return (\n    <Card className={`${classes.root} ${props.className}`}>\n      \n\n      <CardMedia \n        className={classes.media}\n        image={post}\n      />\n\n    </Card>\n  )\n}","import React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport { TextField, Card, Button } from '@material-ui/core'\n// https://www.npmjs.com/package/react-multiple-image-input\nimport MultiImageInput from 'react-multiple-image-input'\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: 600,\n  },\n  input: {\n    display: 'none',\n  },\n}))\n\nexport default function NewPost(props) {\n  const classes = useStyles()\n\n  const [images, setImages] = useState({})\n  const [description, setDescription] = useState(\"\")\n\n  const submit = event => {\n    event.preventDefault()\n    props.onSubmit({images, description})\n  }\n\n  return (\n    <Card className={classes.root}>\n    <MultiImageInput\n      images={images}\n      setImages={setImages}\n      allowCrop={false}\n    />\n    <form onSubmit={submit}>\n    {/* <TextField value={description} onChange={e => setDescription(e.target.value)} label=\"Description\"></TextField> */}\n    <Button type=\"submit\">Post</Button>\n    </form>\n    </Card>\n  )\n}","import React, { useEffect, useState } from 'react'\n\nimport { makeStyles } from '@material-ui/core/styles'\n\nimport PageHeader from '../../components/PageHeader'\nimport Post from '../../components/Post'\nimport NewPost from '../../components/NewPost'\n\nconst useStyles = makeStyles((theme) => ({\n  posts: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\"\n  },\n  post: {\n    margin: \"10px 0\"\n  }\n}))\n\nexport default function Home(props) {\n  const [posts, setPosts] = useState([])\n  const [appName, setAppName] = useState(\"\")\n  const [creatingNewPost, setCreatingNewPost] = useState(false)\n\n  const classes = useStyles(props)\n\n  async function reloadPosts() {\n    try {\n      const data = await props.getPosts()\n      console.log(data)\n      setPosts(data.posts)\n      console.log(data.posts)\n      const nameData = await props.appName()\n      setAppName(nameData.name)\n    } catch (error) {\n      alert(JSON.stringify(error))\n    }\n    \n  }\n\n  useEffect(() => {\n    reloadPosts()\n  }, [])\n\n  const newPost = () => {\n    setCreatingNewPost(creatingNewPost => !creatingNewPost)\n  }\n\n  const createPost = async ({images, description}) => {\n    let imagesArray = []\n    for (const key in images) {\n      imagesArray.push(images[key])\n    }\n    try {\n      const result = await props.savePost({images: imagesArray, description})\n      console.log(result)\n      setCreatingNewPost(false)\n      reloadPosts()\n    } catch (error) {\n      alert(JSON.stringify(error))\n    }\n  }\n\n\n  const postComponents = posts.map(post => {\n    return <Post \n      key={post}\n      className={classes.post}\n      post={post}\n      ></Post>\n  })\n\n  return (\n    <div>\n      <PageHeader newPost={newPost} appName={appName} ></PageHeader>\n      <div className={classes.posts}>\n      { creatingNewPost ?\n      <NewPost onSubmit={createPost}></NewPost>\n      :\n      postComponents\n      }\n      </div>\n    </div>\n  )\n}","import jwtDecode from 'jwt-decode'\n\nexport function getToken() {\n  const token = localStorage.getItem('token')\n  return token\n}\n\nexport function saveToken(accessToken) {\n  localStorage.setItem('token', accessToken)\n}\n\nexport function getTokenDetails() {\n  let decoded\n  const token = getToken()\n  if (!token) {\n    return null\n  }\n  try {\n    decoded = jwtDecode(token)\n  } catch (e) {\n    console.log(e)\n  }\n  return decoded\n}\n\nexport function removeToken() {\n  localStorage.removeItem('token')\n}\n\n","import axios from 'axios'\nimport { v4 as uuid } from 'uuid'\n\nimport { saveToken, getToken, getTokenDetails, removeToken } from '../userManager'\n\nfunction token() {\n  const token = getToken()\n  if (!token) {\n    return {}\n  }\n  return { Authorization: `Bearer ${token}` }\n}\n\nfunction http({method, path, params}) {\n  console.log(token())\n  const headers = {\n    ...token(),\n    \"Access-Control-Allow-Origin\" : \"*\",\n    'Accept': 'application/json',\n    'Content-Type': 'application/json',\n  }\n  console.log('headers', headers)\n  if (method == 'get') {\n    return axios[method](path, { headers })\n  }\n  return axios[method](path, params, { headers })\n}\n\nconst dataURLtoFile = (dataurl, filename) => {\n  const arr = dataurl.split(',')\n  const mime = arr[0].match(/:(.*?);/)[1]\n  const bstr = atob(arr[1])\n  let n = bstr.length\n  const u8arr = new Uint8Array(n)\n  while (n) {\n    u8arr[n - 1] = bstr.charCodeAt(n - 1)\n    n -= 1 // to make eslint happy\n  }\n  return new File([u8arr], filename || uuid(), { type: mime })\n}\n\nexport function savePost({images, description}) {\n  const formData = new FormData();\n \n  images.map(dataURLtoFile).forEach(image => formData.append(\"images\", image))\n  formData.append('description', description)\n\n  return axios.post('/api/posts', formData, { headers: {'Content-Type': 'multipart/form-data', ...token()}})\n  .then(res => res.data)\n}\n\n\nexport function getPosts() {\n  return http({method: 'get', path: `/api/posts`})\n  .then(res => res.data)\n}\n\n\n\nexport function appName() {\n  return http({method: 'get', path: `/api/appName`})\n  .then(res => res.data)\n}","import React from 'react'\nimport { ThemeProvider, createMuiTheme } from '@material-ui/core/styles'\nimport CssBaseline from '@material-ui/core/CssBaseline'\n\nfunction theme(pallet) {\n  return createMuiTheme({\n    backgroundColor: pallet.light ? \"white\" : \"black\",\n  })\n}\n\nexport default function Theme(props) {\n  const t = theme(props.pallet)\n\n  return (\n    <>\n    <ThemeProvider theme={t}>\n    <CssBaseline />\n      {props.children}\n    </ThemeProvider>\n    </>\n  );\n}","import React, { useState, useEffect } from 'react'\n\nimport Home from './pages/Home'\n\nimport * as network from './network'\n\nimport useMediaQuery from '@material-ui/core/useMediaQuery'\nimport Theme from './Theme'\n\nfunction App() {\n  const [error, setError] = useState(null)\n\n  const prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)')\n\n  return (\n    <Theme pallet={prefersDarkMode ? 'dark' : 'light'}>\n      { error ?\n      <h2>{error}...</h2> : \n      <Home {...network} ></Home>\n    }\n    </Theme>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}